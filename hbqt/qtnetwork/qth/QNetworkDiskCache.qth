/*
 * $Id: QGraphicsItemGroup.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2013 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = yes
Inherit     = QAbstractNetworkCache
Type        =
New         =
Version     =
</CLASS>

<CODE>
#include <QtNetwork/QNetworkDiskCache>


/*
 * QNetworkDiskCache(QObject * parent = 0)
 * ~QNetworkDiskCache()
 */
HB_FUNC( QT_QNETWORKDISKCACHE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QNetworkDiskCache( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QNetworkDiskCache() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
QString   cacheDirectory() const
QNetworkCacheMetaData   fileMetaData(const QString & fileName) const
qint64   maximumCacheSize() const
void   setCacheDirectory(const QString & cacheDir)
void   setMaximumCacheSize(qint64 size)

virtual qint64   cacheSize() const
virtual QIODevice *   data(const QUrl & url)
virtual void   insert(QIODevice * device)
virtual QNetworkCacheMetaData   metaData(const QUrl & url)
virtual QIODevice *   prepare(const QNetworkCacheMetaData & metaData)
virtual bool   remove(const QUrl & url)
virtual void   updateMetaData(const QNetworkCacheMetaData & metaData)
</PROTOS>

<SLOTS>
virtual void   clear()
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>

