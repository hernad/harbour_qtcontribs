/*
 * $Id: QGraphicsItemGroup.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2013 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = yes
Inherit     =
Type        =
New         =
Version     =
</CLASS>

<CODE>
#include <QtNetwork/QTcpServer>
#include <QtNetwork/QNetworkProxy>


/*
 * QTcpServer(QObject * parent = 0)
 * virtual   ~QTcpServer()
 */
HB_FUNC( QT_QTCPSERVER )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QTcpServer( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTcpServer() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void   close()
QString   errorString() const
virtual bool   hasPendingConnections() const
bool   isListening() const
bool   listen(const QHostAddress & address = QHostAddress::Any, quint16 port = 0)
int   maxPendingConnections() const
virtual QTcpSocket *   nextPendingConnection()
void   pauseAccepting()                                                        [*V=0x050000*]
QNetworkProxy   proxy() const
void   resumeAccepting()                                                       [*V=0x050000*]
QHostAddress   serverAddress() const
QAbstractSocket::SocketError   serverError() const
quint16   serverPort() const
void   setMaxPendingConnections(int numConnections)
void   setProxy(const QNetworkProxy & networkProxy)
bool   setSocketDescriptor(qintptr socketDescriptor)
qintptr   socketDescriptor() const
bool   waitForNewConnection(int msec = 0, bool * timedOut = 0)
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void   acceptError(QAbstractSocket::SocketError socketError)                   [*V=0x050000*]
void   newConnection()
</SIGNALS>

<VARIABLES>
</VARIABLES>

