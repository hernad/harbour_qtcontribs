/*
 * $Id: QPrinter.qth 369 2014-10-19 20:35:44Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = QPaintDevice
Type        =
New         =
</CLASS>

<CODE>
#include <QtGui/QPrinter>


/*
 * QPrinter ( PrinterMode mode = ScreenResolution )
 * QPrinter ( const QPrinterInfo & printer, PrinterMode mode = ScreenResolution )
 * ~QPrinter ()
 */
HB_FUNC( QT_QPRINTER )
{
   if( hb_pcount() >= 1 && hbqt_par_isDerivedFrom( 1, "QPRINTERINFO" ) )
   {
      __HB_RETPTRGC__( new QPrinter( *hbqt_par_QPrinterInfo( 1 ), ( QPrinter::PrinterMode ) ( HB_ISNUM( 2 ) ? hb_parni( 2 ) : QPrinter::ScreenResolution ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QPrinter( ( QPrinter::PrinterMode ) hb_parni( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPrinter() );
   }
}
</CODE>

<ENUMS>
enum ColorMode { Color, GrayScale }
enum DuplexMode { DuplexNone, DuplexAuto, DuplexLongSide, DuplexShortSide }
enum Orientation { Portrait, Landscape }
enum OutputFormat { NativeFormat, PdfFormat, PostScriptFormat }
enum PageOrder { FirstPageFirst, LastPageFirst }
enum PaperSize { A0, A1, A2, A3, ..., Custom }
enum PaperSource { Auto, Cassette, Envelope, EnvelopeManual, ..., SmallFormat }
enum PrintRange { AllPages, Selection, PageRange }
enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution }
enum PrinterState { Idle, Active, Aborted, Error }
enum Unit { Millimeter, Point, Inch, Pica, ..., DevicePixel }
</ENUMS>

<PROTOS>
bool   abort()
bool   collateCopies() const
ColorMode   colorMode() const
int   copyCount() const
QString   creator() const
QString   docName() const
bool   doubleSidedPrinting() const
DuplexMode   duplex() const
bool   fontEmbeddingEnabled() const
int   fromPage() const
bool   fullPage() const
bool   isValid() const
QString   outputFileName() const
OutputFormat   outputFormat() const
QPageLayout   pageLayout() const
PageOrder   pageOrder() const
QRectF   pageRect(Unit unit) const
QRectF   paperRect(Unit unit) const
PaperSource   paperSource() const
QPrintEngine *   printEngine() const
QString   printProgram() const
PrintRange   printRange() const
QString   printerName() const
QString   printerSelectionOption() const
PrinterState   printerState() const
int   resolution() const
void   setCollateCopies(bool collate)
void   setColorMode(ColorMode newColorMode)
void   setCopyCount(int count)
void   setCreator(const QString & creator)
void   setDocName(const QString & name)
void   setDoubleSidedPrinting(bool doubleSided)
void   setDuplex(DuplexMode duplex)
void   setFontEmbeddingEnabled(bool enable)
void   setFromTo(int from, int to)
void   setFullPage(bool fp)
void   setOutputFileName(const QString & fileName)
void   setOutputFormat(OutputFormat format)
bool   setPageLayout(const QPageLayout & newLayout)
bool   setPageMargins(const QMarginsF & margins)
bool   setPageMargins(const QMarginsF & margins, QPageLayout::Unit units)
void   setPageOrder(PageOrder pageOrder)
bool   setPageOrientation(QPageLayout::Orientation orientation)
bool   setPageSize(const QPageSize & pageSize)
void   setPaperSource(PaperSource source)
void   setPrintProgram(const QString & printProg)
void   setPrintRange(PrintRange range)
void   setPrinterName(const QString & name)
void   setPrinterSelectionOption(const QString & option)
void   setResolution(int dpi)
QList<QPrinter::PaperSource>   supportedPaperSources() const
QList<int>   supportedResolutions() const
bool   supportsMultipleCopies() const
int   toPage() const

virtual bool   newPage()
virtual QPaintEngine *   paintEngine() const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
