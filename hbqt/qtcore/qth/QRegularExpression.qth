/*
 * $Id: QAudioDeviceInfo.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     =
QObject     = No
Version     = 0x040900
</CLASS>


<CODE>
#include <QtCore/QRegularExpression>


/*
 * QRegularExpression()
 * QRegularExpression(const QString & pattern, PatternOptions options = NoPatternOption)
 * QRegularExpression(const QRegularExpression & re)
 * ~QRegularExpression()
 */
HB_FUNC( QT_QREGULAREXPRESSION )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QRegularExpression" ) )
   {
      __HB_RETPTRGC__( new QRegularExpression( *hbqt_par_QRegularExpression( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QRegularExpression() );
   }
}
</CODE>

<ENUMS>
enum    MatchOption { NoMatchOption, AnchoredMatchOption, DontCheckSubjectStringMatchOption }
flags   MatchOptions
enum    MatchType { NormalMatch, PartialPreferCompleteMatch, PartialPreferFirstMatch, NoMatch }
enum    PatternOption { NoPatternOption, CaseInsensitiveOption, DotMatchesEverythingOption, MultilineOption, ..., DontAutomaticallyOptimizeOption }
flags   PatternOptions
</ENUMS>

<PROTOS>
int              captureCount() const
QString          errorString() const
QRegularExpressionMatchIterator   globalMatch(const QString & subject, int offset = 0, MatchType matchType = NormalMatch, MatchOptions matchOptions = NoMatchOption) const
bool             isValid() const
QRegularExpressionMatch   match(const QString & subject, int offset = 0, MatchType matchType = NormalMatch, MatchOptions matchOptions = NoMatchOption) const
QStringList      namedCaptureGroups() const
void             optimize() const                 [*V=0x050400*]
QString          pattern() const
int              patternErrorOffset() const
PatternOptions   patternOptions() const
void             setPattern(const QString & pattern)
void             setPatternOptions(PatternOptions options)
void             swap(QRegularExpression & other)

QString          escape(const QString & str)
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
